import { Component, Inject, ViewChildren } from '@angular/core';
import { delay, filter, startWith, Subject, takeUntil } from 'rxjs';
import { ToastComponent } from './toast/toast.component';
import { TOAST_CONFIG } from '../../toast.tokens';
import { ToastPosition } from '../../enums/enums';
import { NgClass, NgFor, NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../french-toast.service";
export class ToastsComponent {
    toastService;
    config;
    toasts = [];
    toastsComponents;
    position = ToastPosition.BOTTOM_RIGHT;
    bottomRight = ToastPosition.BOTTOM_RIGHT;
    bottomLeft = ToastPosition.BOTTOM_LEFT;
    topRight = ToastPosition.TOP_RIGHT;
    topLeft = ToastPosition.TOP_LEFT;
    fontFamily = '';
    titleFontSize = '';
    contentFontSize = '';
    style = '';
    componentRef;
    destroy$ = new Subject();
    constructor(toastService, config) {
        this.toastService = toastService;
        this.config = config;
        if (this.config.position)
            this.position = this.config.position;
    }
    ngOnInit() {
        this.getToasts();
        this.style = this.getStyles();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngAfterViewInit() {
        this.toastsComponents.changes
            .pipe(takeUntil(this.destroy$), startWith(''), delay(0))
            .subscribe({
            next: () => {
                const reachedLimit = this.toastsComponents.toArray().length > (this.config.limit || 3);
                if (reachedLimit) {
                    this.toastsComponents.toArray()[0].destroyToast();
                }
            },
        });
    }
    getStyles() {
        this.fontFamily = `--font-family: ${this.config.font?.family || 'sans-serif'}`;
        this.titleFontSize = `--title-font-size: ${this.config.font?.titleFontSize || '1.2rem'}`;
        this.contentFontSize = `--content-font-size: ${this.config.font?.contentFontSize || '1rem'}`;
        return `${this.fontFamily}; ${this.titleFontSize}; ${this.contentFontSize}`;
    }
    getToasts() {
        this.listenForToasts();
        this.listenForDestroyAllToasts();
        this.listenForDestroyToast();
    }
    listenForToasts() {
        this.toastService.toast
            .pipe(takeUntil(this.destroy$), filter((toast) => !!toast))
            .subscribe({
            next: (toast) => {
                const toastElement = toast;
                const pinnedToastOnScreen = this.toasts.some((tst) => tst?.pinned);
                if (pinnedToastOnScreen && !toast?.pinned) {
                    const firstPinnedToastIndex = this.toasts.indexOf(this.toasts.find((e) => e.pinned));
                    this.toasts.splice(firstPinnedToastIndex, 0, toastElement);
                    return;
                }
                this.toasts.push(toast);
            },
        });
    }
    listenForDestroyAllToasts() {
        this.toastService.clearAll
            .pipe(takeUntil(this.destroy$))
            .subscribe({
            next: () => {
                if (!this.toastsComponents)
                    return;
                this.toastsComponents.toArray().forEach((e) => {
                    e.destroyToast();
                });
            },
        });
    }
    listenForDestroyToast() {
        this.toastService.clearToast
            .pipe(takeUntil(this.destroy$))
            .subscribe({
            next: (uniqueId) => {
                this.toastsComponents.toArray().find(toast => toast.toast._uId === uniqueId)?.destroyToast();
            }
        });
    }
    control(toast) {
        const index = this.toasts.indexOf(toast);
        this.toasts.splice(index, 1);
        if (this.toasts.length === 0) {
            this.componentRef.destroy();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ToastsComponent, deps: [{ token: i1.ToastService }, { token: TOAST_CONFIG }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.8", type: ToastsComponent, isStandalone: true, selector: "french-toast", viewQueries: [{ propertyName: "toastsComponents", predicate: ToastComponent, descendants: true }], ngImport: i0, template: "@if (toasts.length) {\n  <div class=\"toasts-container\" [style]=\"style\" [ngClass]=\"{\n    'bottom-right': position === bottomRight,\n    'bottom-left': position === bottomLeft,\n    'top-left': position === topLeft,\n    'top-right': position === topRight\n  }\">\n    @for (toast of toasts; track toast._id) {\n      @if (toast?.isVisible) {\n        <toast [toast]=\"toast\" (control)=\"control($event)\"/>\n      }\n    }\n</div>\n}", styles: [".toasts-container{position:fixed;display:flex;gap:.5rem;z-index:1050;padding:1rem}@media screen and (max-width: 768px){.toasts-container{width:100%}}.toasts-container.bottom-right{bottom:0rem;right:0rem;flex-direction:column}.toasts-container.bottom-left{bottom:0rem;left:0rem;flex-direction:column}.toasts-container.top-right{top:0rem;right:0rem;flex-direction:column-reverse}.toasts-container.top-left{top:0rem;left:0rem;flex-direction:column-reverse}\n", "*,*:after,*:before{font-family:var(--font-family);box-sizing:border-box;padding:0;margin:0}\n"], dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: ToastComponent, selector: "toast", inputs: ["toast", "currentTheme"], outputs: ["control"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ToastsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'french-toast', standalone: true, imports: [
                        NgIf,
                        NgClass,
                        NgFor,
                        ToastComponent
                    ], template: "@if (toasts.length) {\n  <div class=\"toasts-container\" [style]=\"style\" [ngClass]=\"{\n    'bottom-right': position === bottomRight,\n    'bottom-left': position === bottomLeft,\n    'top-left': position === topLeft,\n    'top-right': position === topRight\n  }\">\n    @for (toast of toasts; track toast._id) {\n      @if (toast?.isVisible) {\n        <toast [toast]=\"toast\" (control)=\"control($event)\"/>\n      }\n    }\n</div>\n}", styles: [".toasts-container{position:fixed;display:flex;gap:.5rem;z-index:1050;padding:1rem}@media screen and (max-width: 768px){.toasts-container{width:100%}}.toasts-container.bottom-right{bottom:0rem;right:0rem;flex-direction:column}.toasts-container.bottom-left{bottom:0rem;left:0rem;flex-direction:column}.toasts-container.top-right{top:0rem;right:0rem;flex-direction:column-reverse}.toasts-container.top-left{top:0rem;left:0rem;flex-direction:column-reverse}\n", "*,*:after,*:before{font-family:var(--font-family);box-sizing:border-box;padding:0;margin:0}\n"] }]
        }], ctorParameters: () => [{ type: i1.ToastService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOAST_CONFIG]
                }] }], propDecorators: { toastsComponents: [{
                type: ViewChildren,
                args: [ToastComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,
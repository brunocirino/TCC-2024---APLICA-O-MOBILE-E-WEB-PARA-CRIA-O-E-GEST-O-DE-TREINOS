import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { ToastType } from './enums/enums';
import { TOAST_CONFIG } from './toast.tokens';
import { ComponentPortal } from '@angular/cdk/portal';
import { ToastsComponent } from './components/toasts/toasts.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class ToastService {
    config;
    overlay;
    toast = new BehaviorSubject(null);
    clearAll = new Subject();
    clearToast = new Subject();
    overlayRef;
    duration = 7000;
    constructor(config, overlay) {
        this.config = config;
        this.overlay = overlay;
        if (this.config?.defaultDuration) {
            this.duration = this.config.defaultDuration;
        }
    }
    addToast(toastInput, type) {
        const newToast = {
            _id: toastInput._id,
            title: toastInput.title,
            content: toastInput.content,
            isVisible: true,
            duration: toastInput.duration,
            icon: toastInput?.icon ?? null,
            type,
            component: toastInput.component,
            infinite: toastInput.infinite,
            pinned: toastInput.pinned,
            context: toastInput.context,
            _uId: this.getUniqueId(6)
        };
        this.toast.next(newToast);
        if (!this.overlayRef?.hasAttached())
            this.createOverlay();
    }
    createOverlay() {
        this.overlayRef = this.overlay.create();
        const toastPortal = new ComponentPortal(ToastsComponent);
        const componentRef = this.overlayRef.attach(toastPortal);
        componentRef.instance.componentRef = componentRef;
    }
    handleToast(toastInput, type) {
        toastInput._id = toastInput?._id ?? this.getUniqueId(5);
        toastInput.duration = toastInput?.duration ?? this.duration;
        this.addToast(toastInput, type);
    }
    success(toastInput) {
        this.handleToast(toastInput, ToastType.SUCCESS);
    }
    danger(toastInput) {
        this.handleToast(toastInput, ToastType.DANGER);
    }
    info(toastInput) {
        this.handleToast(toastInput, ToastType.INFO);
    }
    warning(toastInput) {
        this.handleToast(toastInput, ToastType.WARNING);
    }
    clearAllToasts() {
        this.clearAll.next();
    }
    destroyToast(toastComponent) {
        this.clearToast.next(toastComponent.toast._uId);
    }
    getUniqueId(parts) {
        const stringArr = [];
        for (let i = 0; i < parts; i++) {
            // tslint:disable-next-line:no-bitwise
            const S4 = (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            stringArr.push(S4);
        }
        return stringArr.join('');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ToastService, deps: [{ token: TOAST_CONFIG }, { token: i1.Overlay }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ToastService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.8", ngImport: i0, type: ToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TOAST_CONFIG]
                }] }, { type: i1.Overlay }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlbmNoLXRvYXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZnJlbmNoLXRvYXN0L3NyYy9saWIvZnJlbmNoLXRvYXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7O0FBT3ZFLE1BQU0sT0FBTyxZQUFZO0lBUW1CO0lBQTZCO0lBTnZFLEtBQUssR0FBdUMsSUFBSSxlQUFlLENBQW9CLElBQUksQ0FBQyxDQUFDO0lBQ3pGLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBQy9CLFVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBQzNCLFVBQVUsQ0FBYztJQUN4QixRQUFRLEdBQVcsSUFBSSxDQUFDO0lBRWhDLFlBQTBDLE1BQW1CLEVBQVUsT0FBZ0I7UUFBN0MsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDckYsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFDOUMsQ0FBQztJQUNILENBQUM7SUFFTyxRQUFRLENBQUMsVUFBMkIsRUFBRSxJQUFlO1FBQzNELE1BQU0sUUFBUSxHQUFlO1lBQzNCLEdB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LENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0UsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7dUdBOUVVLFlBQVksa0JBUUgsWUFBWTsyR0FSckIsWUFBWSxjQUZYLE1BQU07OzJGQUVQLFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFTYyxNQUFNOzJCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVG9hc3RNb2RlbCB9IGZyb20gJy4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFRvYXN0SW5wdXRNb2RlbCB9IGZyb20gJy4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFRvYXN0VHlwZSB9IGZyb20gJy4vZW51bXMvZW51bXMnO1xuaW1wb3J0IHsgVG9hc3RDb25maWcgfSBmcm9tICcuL2ludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBUT0FTVF9DT05GSUcgfSBmcm9tICcuL3RvYXN0LnRva2Vucyc7XG5pbXBvcnQgeyBPdmVybGF5LCBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBUb2FzdHNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9hc3RzL3RvYXN0cy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVG9hc3RDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9hc3RzL3RvYXN0L3RvYXN0LmNvbXBvbmVudCc7XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVG9hc3RTZXJ2aWNlIHtcblxuICB0b2FzdDogQmVoYXZpb3JTdWJqZWN0PFRvYXN0TW9kZWwgfCBudWxsPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VG9hc3RNb2RlbCB8IG51bGw+KG51bGwpO1xuICBjbGVhckFsbCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIGNsZWFyVG9hc3QgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gIHByaXZhdGUgb3ZlcmxheVJlZiE6IE92ZXJsYXlSZWY7XG4gIHByaXZhdGUgZHVyYXRpb246IG51bWJlciA9IDcwMDA7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChUT0FTVF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBUb2FzdENvbmZpZywgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5KSB7XG4gICAgaWYgKHRoaXMuY29uZmlnPy5kZWZhdWx0RHVyYXRpb24pIHtcbiAgICAgIHRoaXMuZHVyYXRpb24gPSB0aGlzLmNvbmZpZy5kZWZhdWx0RHVyYXRpb247XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRUb2FzdCh0b2FzdElucHV0OiBUb2FzdElucHV0TW9kZWwsIHR5cGU6IFRvYXN0VHlwZSk6IHZvaWQge1xuICAgIGNvbnN0IG5ld1RvYXN0OiBUb2FzdE1vZGVsID0ge1xuICAgICAgX2lkOiB0b2FzdElucHV0Ll9pZCxcbiAgICAgIHRpdGxlOiB0b2FzdElucHV0LnRpdGxlLFxuICAgICAgY29udGVudDogdG9hc3RJbnB1dC5jb250ZW50LFxuICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgZHVyYXRpb246IHRvYXN0SW5wdXQuZHVyYXRpb24sXG4gICAgICBpY29uOiB0b2FzdElucHV0Py5pY29uID8/IG51bGwsXG4gICAgICB0eXBlLFxuICAgICAgY29tcG9uZW50OiB0b2FzdElucHV0LmNvbXBvbmVudCxcbiAgICAgIGluZmluaXRlOiB0b2FzdElucHV0LmluZmluaXRlLFxuICAgICAgcGlubmVkOiB0b2FzdElucHV0LnBpbm5lZCxcbiAgICAgIGNvbnRleHQ6IHRvYXN0SW5wdXQuY29udGV4dCxcbiAgICAgIF91SWQ6IHRoaXMuZ2V0VW5pcXVlSWQoNilcbiAgICB9O1xuICAgIHRoaXMudG9hc3QubmV4dChuZXdUb2FzdCk7XG4gICAgaWYgKCF0aGlzLm92ZXJsYXlSZWY/Lmhhc0F0dGFjaGVkKCkpIHRoaXMuY3JlYXRlT3ZlcmxheSgpO1xuICB9XG5cbiAgY3JlYXRlT3ZlcmxheSgpOiB2b2lkIHtcbiAgICB0aGlzLm92ZXJsYXlSZWYgPSB0aGlzLm92ZXJsYXkuY3JlYXRlKCk7XG4gICAgY29uc3QgdG9hc3RQb3J0YWwgPSBuZXcgQ29tcG9uZW50UG9ydGFsKFRvYXN0c0NvbXBvbmVudCk7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5vdmVybGF5UmVmLmF0dGFjaCh0b2FzdFBvcnRhbCk7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbXBvbmVudFJlZiA9IGNvbXBvbmVudFJlZjtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlVG9hc3QodG9hc3RJbnB1dDogVG9hc3RJbnB1dE1vZGVsLCB0eXBlOiBUb2FzdFR5cGUpOiB2b2lkIHtcbiAgICB0b2FzdElucHV0Ll9pZCA9IHRvYXN0SW5wdXQ/Ll9pZCA/PyB0aGlzLmdldFVuaXF1ZUlkKDUpO1xuICAgIHRvYXN0SW5wdXQuZHVyYXRpb24gPSB0b2FzdElucHV0Py5kdXJhdGlvbiA/PyB0aGlzLmR1cmF0aW9uO1xuICAgIHRoaXMuYWRkVG9hc3QodG9hc3RJbnB1dCwgdHlwZSk7XG4gIH1cblxuICBzdWNjZXNzKHRvYXN0SW5wdXQ6IFRvYXN0SW5wdXRNb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlVG9hc3QodG9hc3RJbnB1dCwgVG9hc3RUeXBlLlNVQ0NFU1MpO1xuICB9XG5cbiAgZGFuZ2VyKHRvYXN0SW5wdXQ6IFRvYXN0SW5wdXRNb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlVG9hc3QodG9hc3RJbnB1dCwgVG9hc3RUeXBlLkRBTkdFUik7XG4gIH1cblxuICBpbmZvKHRvYXN0SW5wdXQ6IFRvYXN0SW5wdXRNb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuaGFuZGxlVG9hc3QodG9hc3RJbnB1dCwgVG9hc3RUeXBlLklORk8pO1xuICB9XG5cbiAgd2FybmluZyh0b2FzdElucHV0OiBUb2FzdElucHV0TW9kZWwpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZVRvYXN0KHRvYXN0SW5wdXQsIFRvYXN0VHlwZS5XQVJOSU5HKTtcbiAgfVxuXG4gIGNsZWFyQWxsVG9hc3RzKCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJBbGwubmV4dCgpO1xuICB9XG5cbiAgZGVzdHJveVRvYXN0KHRvYXN0Q29tcG9uZW50OiBUb2FzdENvbXBvbmVudCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJUb2FzdC5uZXh0KHRvYXN0Q29tcG9uZW50LnRvYXN0Ll91SWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVbmlxdWVJZChwYXJ0czogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHJpbmdBcnIgPSBbXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpPCBwYXJ0czsgaSsrKXtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICBjb25zdCBTNCA9ICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcbiAgICAgIHN0cmluZ0Fyci5wdXNoKFM0KTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ0Fyci5qb2luKCcnKTtcbiAgfVxufSJdfQ==